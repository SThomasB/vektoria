

:: wrap value = (f, (f value))
:: unwrap t  = (t (a, a))
:: t =<-(wrap 3)

:: app f t = (wrap (f (unwrap t)))

:: incr t = (app (a, a+1) t)

:: uPrint t = (app (a, (@probe a)) t)

:: loop n t = ? (unwrap t) == n -> t | (loop n (incr (uPrint t)))

:: seqq tf tv = let :: f =<- (unwrap tf) in (app f tv)
:: pair a b = [a b]
:: a =<- (wrap 1)
:: b =<- (wrap 2)
(uPrint (seqq (app pair a) b))




