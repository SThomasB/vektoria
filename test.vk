
-- this is a comment

-- assignment

myInt = 10
myFloat = 10.0
myString = "Hello world"
-- arithmetic
intPlus = myInt + 20
floatPlus = myFloat + 20.0
stringPlus = myString + ", and others"
stringPlusValue = myInt + " + " + 20 + " = " + intPlus
multiplyNumbers = myFloat * myInt
x = 20*30/2 + 10.0 * (30 + 2)

b=10
functionResult = (add
    (add
        1
        (add 1 2 3)
        2
    )
    (add 1 2 3)
    (add 1 2 3)
)


-- or the syntactic sugar number[x]
ms = 0.001
time = 1[ms]


x = 1
y = 2
myFunc = (a, a+1)
myOuterFunc = (a, (myFunc 2) + 3)
aliasAdd = (a b c d,
    a+b+c+d+(add a b c)
)
g = (x, x+1)
preInc = (f x, (f x+1))
rec = (a b,
    ? a<b -> (rec b a+1)
    | a
)
tertiary = 2 * ? 3>4  -> 5
               |
               ? 5>2  -> 2
               |
               ? True -> 3
               | 1

printFirstTen = (
    @print
    "---------------------Test------------------"
    "1: 10="+myInt
    "2: 10.0="+myFloat
    "3: Hello world="+myString
    "4: 30="+intPlus
    "5: 30.0="+floatPlus
    "6: "+floatPlus
    "7: "+stringPlusValue
    "8: "+multiplyNumbers
    "9: "+x
    "10 (function call) ="+ (functionResult==21)
)

printIt = (
  @print
    "11: bracket multiply ="+(time==ms)
    "14: should be arity error = "
    (add 1 2)
    "15: function call in binary op ="+((add 1 2 3) > 2)
    "16: References as arguments ="+((add x y 3) == 6)
    "17: variables in parenthesized factors ="+((1+3*(y+x))== 10)
    "18: lambdas should be 2 =" + ((a, a+1) 1)
    "19 Use function in function ="+((aliasAdd 1 1 1 1)==7)
    "20: Functions are first class ="+((preInc g 1)==3)
    "21: Functions can recurse ="+((rec 0 10) == 10)
    "22: Tertiary expression in arithmetic expression ="+(tertiary==4)
    "23: Bound lambda, should be 3 =" + (myFunc 2)
    "24: Bound lambda using another bound lambda, should be 6 =" + (myOuterFunc 2)
    "25: The return type of printing the first ten items should be void"+(printFirstTen)
)
printIt

(@print
    ""
    ""
    "------------Samples-------------------"
    ""
    ""
    "1 factorial:"
    "-- use 'let in' syntactic sugar for constructing local bindings"
    ""
    "2 fibbonacci:"
    "-- use @probe to print and return values"
    ""
)

factorialTail = (n acc,
               ? n == 0 -> acc
               | (factorialTail (n-1) (n*acc))
)

let n=10 a=2 in (@print
    "----------------Factorial---------------"
    ""
    "Factorial "+(n+a)+" is "+(factorialTail (n+a) 1)
    ""
    ""
    "----------------end program--------------"
)


fibTail = (n a b,
        ? n == 1 -> a
        | (fibTail (@probe "Comupting..." n-1)  b a+b)
)

n=10

result = let fib=(x, @probe (fibTail x 0 1)) in (
    (fib n)
)

(@print
    "--------------Fib-------------------"
    ""
    "Fib of 10 is:..."
    ""
)

tull=20

(@print ""
"-----------------end program----------------"
)

((@probe fibTail) 7 0 1)
